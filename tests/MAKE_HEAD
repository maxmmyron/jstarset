.ONESHELL:

BJAR := ../../build.jar
TJAR := ../../tests.jar

NC=\033[0m       # Text Reset
GREEN=\033[0;32m # Green
RED=\033[0;31m   # Red

# Runs a provided test and print pass state if the test returned nothing
define test_returns_nil
  OUT=$$(java -cp $(BJAR):$(TJAR) $(1) 2>&1)
  if [ $$? -ne 0 ] ; then
    echo "$(1) $(RED)[FAILED]$(NC) (Exited with non-zero status, expected zero)"
    echo "$(RED)Error Trace$(NC): \n$$OUT\n"
  else
    if [ "$$OUT" = "" ] ; then
      echo "$(1) $(GREEN)[PASSED]$(NC)"
    else
      echo "$(1) $(RED)[FAILED]$(NC) (Returned non-nil $$OUT)"
    fi
  fi
endef

# Runs a provided test and print pass state if the test returns literal string provided
define test_returns_lit
  OUT=$$(java -cp $(BJAR):$(TJAR) $(1) 2>&1)
  if [ $$? -ne 0 ] ; then
    echo "$(1) $(RED)[FAILED]$(NC) (Exited with non-zero status, expected zero)"
    echo "$(RED)Error Trace$(NC): \n$$OUT\n"
  else
    [ "$$OUT" = $(2) ] # returns 0 if outputs are equal
    if [ $$? -eq 0 ] ; then
      echo "$(1) $(GREEN)[PASSED]$(NC)"
    else
      echo "$(1) $(RED)[FAILED]$(NC) (Returned $$OUT, Expected $(2))"
    fi
  fi
endef